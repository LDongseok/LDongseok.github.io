<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Domain Generalization with CDR Equation</title>

  <!-- Plotly.js for 2D/3D plotting -->
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

  <!-- MathJax for LaTeX -->
  <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
  <script 
    id="MathJax-script"
    async
    src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js">
  </script>

  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: black;
      color: lightblue;
      margin: 0; 
      padding: 0; 
      text-align: center;
    }
    .container {
      width: 80%;
      margin: auto;
      padding: 20px;
    }
    nav {
      display: flex;
      justify-content: center;
      background: black;
      padding: 10px 0;
      font-size: 1.2em;
    }
    nav a {
      color: lightblue;
      text-decoration: none;
      margin: 0 15px;
      font-weight: bold;
    }
    h1 {
      font-size: 2.5em;
      margin-bottom: 20px;
    }
    .description {
      font-size: 1.1em;
      margin-bottom: 20px;
      color: lightblue;
      line-height: 1.5;
      text-align: left;
      display: inline-block;
      background-color: #333;
      padding: 10px;
      border-radius: 5px;
    }
    #clickPlot {
      width: 600px;
      height: 400px;
      margin: auto;
      background-color: #222;
    }
    #plotDiv {
      width: 80%;
      height: 600px;
      margin: 40px auto;
    }
    button {
      background: red;
      color: white;
      border: none;
      padding: 10px 20px;
      font-size: 1.2em;
      cursor: pointer;
      border-radius: 5px;
    }
    .result {
      margin-top: 20px;
      font-size: 1.2em;
      background-color: #222;
      padding: 10px;
      border-radius: 5px;
      word-wrap: break-word;
    }
  </style>
</head>
<body>
  <nav>
    <a href="#">Home</a>
    <a href="#">Publications</a>
    <a href="#">Activities</a>
    <a href="#">Philosophy</a>
    <a href="#">Contact</a>
    <a href="#">Open Research Chat</a>
    <a href="#">SciML Simulations</a>
  </nav>

  <div class="container">
    <h1>Domain Generalization with CDR Equation</h1>

    <div class="description">
      <p>
        Suppose we want to define a domain by clicking 4 points (corners) 
        on the 2D plane. Then we'll interpret those 4 points as a bounding 
        rectangle (xmin, xmax, ymin, ymax).
      </p>
      <p>
        We'll generate a grid of unknown tokens inside that rectangle, 
        and send them to the server for CDR equation prediction. 
        Then we'll show the result as a 3D surface plot.
      </p>
      <p>
        Click exactly 4 points in the plot below (in a roughly rectangular shape). 
        Then press "Generate Domain & Solve" to see the solution.
      </p>
    </div>

    <!-- 2D click plot for picking domain corners -->
    <div id="clickPlot"></div>
    <button onclick="generateDomainAndSolve()">Generate Domain & Solve</button>
    <div class="result" id="resultDiv"></div>

    <!-- 3D Plot of solution -->
    <div id="plotDiv"></div>
  </div>

  <script>
    // We'll store the 4 clicked points here
    let domainPoints = [];

    // 1) Setup an empty 2D scatter plot for domain corner picking
    const layout2D = {
      title: "Click 4 Points for Domain Corners",
      xaxis: { range: [0, 1], title: "x" },
      yaxis: { range: [0, 1], title: "y" },
    };

    Plotly.newPlot("clickPlot", [{x:[], y:[], mode:'markers'}], layout2D);

    // 2) Listen for plotly_click
    document.getElementById("clickPlot").on("plotly_click", (data) => {
      if (domainPoints.length >= 4) {
        alert("Already have 4 points. Please press 'Generate Domain & Solve' or reload.");
        return;
      }
      let xVal = data.points[0].x;
      let yVal = data.points[0].y;
      domainPoints.push([xVal, yVal]);
      console.log("Clicked:", xVal, yVal);

      // Add to the scatter
      let update = {
        x: [[xVal]],
        y: [[yVal]]
      };
      Plotly.extendTraces("clickPlot", update, [0]);
    });

    async function generateDomainAndSolve() {
      if (domainPoints.length < 4) {
        alert("You must click exactly 4 points first!");
        return;
      }

      // 1) Determine bounding rectangle
      let xs = domainPoints.map(p => p[0]);
      let ys = domainPoints.map(p => p[1]);
      let xmin = Math.min(...xs);
      let xmax = Math.max(...xs);
      let ymin = Math.min(...ys);
      let ymax = Math.max(...ys);

      // 2) Generate 10x10 grid inside [xmin, xmax] x [ymin, ymax]
      let gridSize = 10;
      let unknownTokens = [];
      for (let i=0; i<gridSize; i++){
        for (let j=0; j<gridSize; j++){
          let xVal = xmin + (xmax - xmin)*i/(gridSize-1);
          let yVal = ymin + (ymax - ymin)*j/(gridSize-1);
          unknownTokens.push([xVal, yVal, -1]);
        }
      }

      // 3) Hard-code some known & epsilons, or let user define
      // For simplicity, let's do minimal known:
      let knownData = [[[0.1,0.2,0.9],[0.2,0.3,0.7]]];
      let epsilons = [0.01];

      // 4) Build JSON
      let jsonData = {
        known: knownData,
        epsilons: epsilons,
        unknown: [unknownTokens]  // batch=1
      };

      // 5) Send to server
      // In practice, replace with your server's endpoint
      const ngrokURL = "https://xxxx-125-186-24-176.ngrok-free.app/predict";
      document.getElementById("resultDiv").innerText = "Solving...";

      try {
        let response = await fetch(ngrokURL, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(jsonData)
        });
        let data = await response.json();
        console.log("Server response:", data);

        if (data.error) {
          document.getElementById("resultDiv").innerText = "Error: " + data.error;
        } else {
          document.getElementById("resultDiv").innerText = "Success!";
          let output = data.output || data.result;
          if (!output) {
            document.getElementById("resultDiv").innerText = "No output or result in response.";
            return;
          }
          // 6) Create surface plot
          createSurfacePlot(unknownTokens, output);
        }
      } catch(err) {
        document.getElementById("resultDiv").innerText = "Error: " + err;
      }
    }

    // 3D Surface Plot
    function createSurfacePlot(unknownData, outputData){
      console.log("createSurfacePlot - unknownData:", unknownData);
      console.log("outputData:", outputData);

      // If batch=1 => flatten
      if (Array.isArray(outputData[0]) && Array.isArray(outputData[0][0])){
        outputData = outputData[0];
      }

      // unknownData has 10x10 = 100 points
      let size = 10;
      let X = [], Y = [], Z = [];
      for (let i=0; i<size; i++){
        X.push([]);
        Y.push([]);
        Z.push([]);
      }

      for (let idx=0; idx<unknownData.length; idx++){
        let i = Math.floor(idx/size);
        let j = idx % size;
        let pt = unknownData[idx]; // [x,y,-1]
        let xVal = pt[0];
        let yVal = pt[1];

        let zVal = Array.isArray(outputData[idx]) ? outputData[idx][0] : outputData[idx];

        X[i][j] = xVal;
        Y[i][j] = yVal;
        Z[i][j] = zVal;
      }

      let trace = {
        type: "surface",
        x: X,
        y: Y,
        z: Z,
        colorscale: "Viridis"
      };

      let layout = {
        title: "Surface Plot on Clicked Domain",
        scene: {
          xaxis: { title: "x" },
          yaxis: { title: "y" },
          zaxis: { title: "u(x,y)" }
        }
      };

      Plotly.newPlot("plotDiv", [trace], layout);
    }
  </script>
</body>
</html>
